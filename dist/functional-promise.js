/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _require = __webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./modules/utils */ 2),isFunction = _require2.isFunction,flatten = _require2.flatten;var _require3 =
__webpack_require__(/*! ./monads */ 4),chain = _require3.chain,chainEnd = _require3.chainEnd;
var FP = FunctionalPromise;

Object.assign(FP.prototype,
__webpack_require__(/*! ./arrays */ 5),
__webpack_require__(/*! ./events */ 6),
__webpack_require__(/*! ./conditional */ 7),
__webpack_require__(/*! ./promise */ 8));

function FunctionalPromise(resolveRejectCB, unknownArgs) {
  if (!(this instanceof FunctionalPromise)) {return new FunctionalPromise(resolveRejectCB);}
  if (unknownArgs != undefined) throw new Error('FunctionalPromise only accepts 1 argument');
  this._FP = {
    errors: { limit: 1, count: 0 },
    concurrencyLimit: 4,
    promise: new Promise(resolveRejectCB) };

}

FP.all = FP.prototype.all;
FP.delay = FP.prototype.delay;
FP.thenIf = FP.prototype._thenIf;

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('quiet', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.errors = { count: 0, limit: limit };
  return this;
};

FP.prototype.get = function get() {for (var _len = arguments.length, keyNames = Array(_len), _key = 0; _key < _len; _key++) {keyNames[_key] = arguments[_key];}
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  keyNames = flatten(keyNames);
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce(function (extracted, key) {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 2) return this.catchIf.apply(this, arguments);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.catch(function (err) {
    return fn(err); // try re-throw, might be really slow...
  }));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));

  return FP.resolve(this._FP.promise.catch(function (err) {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(function (value) {return fn(value) ? value : value;}));
};

FP.resolve = function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {var _this = this;
  return function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = FP.promisify(obj['' + fnName]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  var resolve = void 0,reject = void 0,promise = void 0;
  promise = new Promise(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
};

module.exports = FunctionalPromise;

if (process && process.on) {
  process.on('uncaughtException', function (e) {return console.error('Process: FATAL EXCEPTION: uncaughtException', e, '\n\n');});
  process.on('unhandledRejection', function (e) {return console.error('Process: FATAL PROMISE ERROR: unhandledRejection', e, '\n\n');});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRnVuY3Rpb25hbEVycm9yIiwiaXNGdW5jdGlvbiIsImZsYXR0ZW4iLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJGdW5jdGlvbmFsUHJvbWlzZSIsIk9iamVjdCIsImFzc2lnbiIsInByb3RvdHlwZSIsInJlc29sdmVSZWplY3RDQiIsInVua25vd25BcmdzIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJfRlAiLCJlcnJvcnMiLCJsaW1pdCIsImNvdW50IiwiY29uY3VycmVuY3lMaW1pdCIsInByb21pc2UiLCJQcm9taXNlIiwiYWxsIiwiZGVsYXkiLCJ0aGVuSWYiLCJfdGhlbklmIiwiYWRkU3RlcCIsIm5hbWUiLCJhcmdzIiwic3RlcHMiLCJwdXNoIiwiY29uY3VycmVuY3kiLCJJbmZpbml0eSIsImFyZ3VtZW50cyIsInF1aWV0IiwiZ2V0Iiwia2V5TmFtZXMiLCJ0aGVuIiwib2JqIiwibGVuZ3RoIiwicmVkdWNlIiwiZXh0cmFjdGVkIiwia2V5Iiwic2V0Iiwia2V5TmFtZSIsInZhbHVlIiwiY2F0Y2giLCJmbiIsImNhdGNoSWYiLCJyZXNvbHZlIiwiZXJyIiwiY29uZGl0aW9uIiwidGFwIiwicmVqZWN0IiwicHJvbWlzaWZ5IiwiY2IiLCJ5YWgiLCJuYWgiLCJjYWxsIiwicmVzIiwicHJvbWlzaWZ5QWxsIiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmlsdGVyIiwiZm5OYW1lIiwidGVzdCIsInVucGFjayIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm9jZXNzIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJlIl0sIm1hcHBpbmdzIjoid1JBQW1DQSxRQUFRLGtCQUFSLEMsQ0FBNUJDLGUsWUFBQUEsZTtBQUM0QkQsUUFBUSxpQkFBUixDLENBQTVCRSxVLGFBQUFBLFUsQ0FBWUMsTyxhQUFBQSxPO0FBQ2dCSCxRQUFRLFVBQVIsQyxDQUE1QkksSyxhQUFBQSxLLENBQU9D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UixDQUFjLGtEQUFkLEVBQWtFQyxDQUFsRSxFQUFxRSxNQUFyRSxDQUFMLEVBQWpDO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RnVuY3Rpb25hbEVycm9yfSAgICAgICAgICA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuY29uc3Qge2lzRnVuY3Rpb24sIGZsYXR0ZW59ICAgICAgPSByZXF1aXJlKCcuL21vZHVsZXMvdXRpbHMnKVxuY29uc3Qge2NoYWluLCBjaGFpbkVuZH0gICAgICAgICAgPSByZXF1aXJlKCcuL21vbmFkcycpXG5jb25zdCBGUCA9IEZ1bmN0aW9uYWxQcm9taXNlXG5cbk9iamVjdC5hc3NpZ24oRlAucHJvdG90eXBlLFxuICByZXF1aXJlKCcuL2FycmF5cycpLFxuICByZXF1aXJlKCcuL2V2ZW50cycpLFxuICByZXF1aXJlKCcuL2NvbmRpdGlvbmFsJyksXG4gIHJlcXVpcmUoJy4vcHJvbWlzZScpKVxuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUHJvbWlzZShyZXNvbHZlUmVqZWN0Q0IsIHVua25vd25BcmdzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGdW5jdGlvbmFsUHJvbWlzZSkpIHtyZXR1cm4gbmV3IEZ1bmN0aW9uYWxQcm9taXNlKHJlc29sdmVSZWplY3RDQil9XG4gIGlmICh1bmtub3duQXJncyAhPSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb25hbFByb21pc2Ugb25seSBhY2NlcHRzIDEgYXJndW1lbnQnKVxuICB0aGlzLl9GUCA9IHtcbiAgICBlcnJvcnM6IHtsaW1pdDogMSwgY291bnQ6IDB9LFxuICAgIGNvbmN1cnJlbmN5TGltaXQ6IDQsXG4gICAgcHJvbWlzZTogbmV3IFByb21pc2UocmVzb2x2ZVJlamVjdENCKSxcbiAgfVxufVxuXG5GUC5hbGwgPSBGUC5wcm90b3R5cGUuYWxsXG5GUC5kZWxheSA9IEZQLnByb3RvdHlwZS5kZWxheVxuRlAudGhlbklmID0gRlAucHJvdG90eXBlLl90aGVuSWZcblxuLy8gTW9uYWRpYyBNZXRob2RzXG5GUC5jaGFpbiA9IGNoYWluXG5GUC5wcm90b3R5cGUuY2hhaW5FbmQgPSBjaGFpbkVuZFxuXG5GUC5wcm90b3R5cGUuYWRkU3RlcCA9IGZ1bmN0aW9uIGFkZFN0ZXAobmFtZSwgYXJncykge1xuICBpZiAodGhpcy5zdGVwcykgdGhpcy5zdGVwcy5wdXNoKFtuYW1lLCB0aGlzLCBhcmdzXSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuRlAucHJvdG90eXBlLmNvbmN1cnJlbmN5ID0gZnVuY3Rpb24gY29uY3VycmVuY3kobGltaXQgPSBJbmZpbml0eSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY29uY3VycmVuY3knLCBbLi4uYXJndW1lbnRzXSlcbiAgdGhpcy5fRlAuY29uY3VycmVuY3lMaW1pdCA9IGxpbWl0XG4gIHJldHVybiB0aGlzXG59XG5cbkZQLnByb3RvdHlwZS5xdWlldCA9IGZ1bmN0aW9uIHF1aWV0KGxpbWl0ID0gSW5maW5pdHkpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3F1aWV0JywgWy4uLmFyZ3VtZW50c10pXG4gIHRoaXMuX0ZQLmVycm9ycyA9IHsgY291bnQ6IDAsIGxpbWl0OiBsaW1pdCB9XG4gIHJldHVybiB0aGlzXG59XG5cbkZQLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQoLi4ua2V5TmFtZXMpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2dldCcsIFsuLi5hcmd1bWVudHNdKVxuICBrZXlOYW1lcyA9IGZsYXR0ZW4oa2V5TmFtZXMpXG4gIHJldHVybiB0aGlzLnRoZW4oKG9iaikgPT4ge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGtleU5hbWVzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIG9ialtrZXlOYW1lc1swXV1cbiAgICAgIHJldHVybiBrZXlOYW1lcy5yZWR1Y2UoKGV4dHJhY3RlZCwga2V5KSA9PiB7XG4gICAgICAgIGV4dHJhY3RlZFtrZXldID0gb2JqW2tleV1cbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZFxuICAgICAgfSwge30pXG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfSlcbn1cblxuRlAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldChrZXlOYW1lLCB2YWx1ZSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnc2V0JywgWy4uLmFyZ3VtZW50c10pXG4gIHJldHVybiB0aGlzLnRoZW4ob2JqID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIG9ialtrZXlOYW1lXSA9IHZhbHVlXG4gICAgcmV0dXJuIG9ialxuICB9KVxufVxuXG5GUC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY2F0Y2gnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHJldHVybiB0aGlzLmNhdGNoSWYoLi4uYXJndW1lbnRzKVxuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLmNhdGNoKGZuKWAuIE11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudGx5OiAnICsgdHlwZW9mIGZuKVxuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLmNhdGNoKGVyciA9PiB7XG4gICAgcmV0dXJuIGZuKGVycikgLy8gdHJ5IHJlLXRocm93LCBtaWdodCBiZSByZWFsbHkgc2xvdy4uLlxuICB9KSlcbn1cblxuRlAucHJvdG90eXBlLmNhdGNoSWYgPSBmdW5jdGlvbiBjYXRjaElmKGNvbmRpdGlvbiwgZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2NhdGNoSWYnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC5jYXRjaElmKGNvbmRpdGlvbiwgZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyB0eXBlb2YgZm4pXG5cbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChlcnIgPT4ge1xuICAgIGlmIChjb25kaXRpb24gJiYgZXJyIGluc3RhbmNlb2YgY29uZGl0aW9uKSByZXR1cm4gZm4oZXJyKSAvLyB0cnkgcmUtdGhyb3csIG1pZ2h0IGJlIHJlYWxseSBzbG93Li4uXG4gICAgdGhyb3cgZXJyXG4gIH0pKVxufVxuXG5GUC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIHRoZW4oZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW4nLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC50aGVuKGZuKWAuIE11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudGx5OiAnICsgdHlwZW9mIGZuKVxuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLnRoZW4oZm4pKVxufVxuXG5GUC5wcm90b3R5cGUudGFwID0gZnVuY3Rpb24gdGFwKGZuKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXAnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC50YXAoZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyB0eXBlb2YgZm4pXG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UudGhlbih2YWx1ZSA9PiBmbih2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlKSlcbn1cblxuRlAucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBGUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbikpIHJldHVybiB2YWx1ZS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdClcbiAgICByZXNvbHZlKHZhbHVlKVxuICB9KVxufVxuXG5GUC5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkoY2IpIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiBuZXcgRlAoKHlhaCwgbmFoKSA9PlxuICAgIGNiLmNhbGwodGhpcywgLi4uYXJncywgKGVyciwgcmVzKSA9PiBlcnIgPyBuYWgoZXJyKSA6IHlhaChyZXMpKSlcbn1cblxuRlAucHJvbWlzaWZ5QWxsID0gZnVuY3Rpb24gcHJvbWlzaWZ5QWxsKG9iaikge1xuICBpZiAoIW9iaiB8fCAhT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIHsgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IG9iaiBpbiBwcm9taXNpZnlBbGwob2JqKScpIH1cbiAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgLmZpbHRlcihrZXkgPT4gdHlwZW9mIG9ialtrZXldID09PSAnZnVuY3Rpb24nKVxuICAucmVkdWNlKChvYmosIGZuTmFtZSkgPT4ge1xuICAgIGlmICghL1N5bmMvLnRlc3QoZm5OYW1lKSAmJiAhb2JqW2Ake2ZuTmFtZX1Bc3luY2BdKSBvYmpbYCR7Zm5OYW1lfUFzeW5jYF0gPSBGUC5wcm9taXNpZnkob2JqW2Ake2ZuTmFtZX1gXSlcbiAgICByZXR1cm4gb2JqXG4gIH0sIG9iailcbn1cblxuRlAudW5wYWNrID0gZnVuY3Rpb24gdW5wYWNrKCkge1xuICBsZXQgcmVzb2x2ZSwgcmVqZWN0LCBwcm9taXNlO1xuICBwcm9taXNlID0gbmV3IFByb21pc2UoKHlhaCwgbmFoKSA9PiB7IHJlc29sdmUgPSB5YWg7IHJlamVjdCA9IG5haCB9KVxuICByZXR1cm4geyBwcm9taXNlLCByZXNvbHZlLCByZWplY3QgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uYWxQcm9taXNlXG5cbmlmIChwcm9jZXNzICYmIHByb2Nlc3Mub24pIHtcbiAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBlID0+IGNvbnNvbGUuZXJyb3IoJ1Byb2Nlc3M6IEZBVEFMIEVYQ0VQVElPTjogdW5jYXVnaHRFeGNlcHRpb24nLCBlLCAnXFxuXFxuJykpXG4gIHByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIGUgPT4gY29uc29sZS5lcnJvcignUHJvY2VzczogRkFUQUwgUFJPTUlTRSBFUlJPUjogdW5oYW5kbGVkUmVqZWN0aW9uJywgZSwgJ1xcblxcbicpKVxufVxuIl19
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.getOwnPropertyNames(options).
      forEach(function (key) {
        _this[key] = options[key];
      });
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwibmFtZSIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InFuQ0FBTUEsZTtBQUNKLDJCQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLFFBQU9ELEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCLEtBSnVCO0FBS2xCRixPQUxrQjtBQU14QixRQUFJLFFBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JFLGFBQU9DLG1CQUFQLENBQTJCSCxPQUEzQjtBQUNDSSxhQURELENBQ1MsZUFBTztBQUNkLGNBQUtDLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FIRDtBQUlEO0FBQ0QsVUFBS0MsSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFkd0I7QUFlekIsRyx5QkFoQjJCQyxLOztBQWtCeEJFLG1CLHdVQUE0QlosZTtBQUM1QmEsaUIsOFRBQTBCYixlO0FBQzFCYyxZLGdTQUFxQmQsZTtBQUNyQmUsVywwUkFBb0JmLGU7QUFDcEJnQixTLDhRQUFrQmhCLGU7O0FBRXhCaUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbEIsa0NBRGU7QUFFZlksMENBRmU7QUFHZkMsc0NBSGU7QUFJZkMsNEJBSmU7QUFLZkMsMEJBTGU7QUFNZkMsc0JBTmUsRUFBakIiLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRnVuY3Rpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2dcbiAgICAgIGlmICggbXNnLm1lc3NhZ2UgKSBtc2cgPSBtc2cubWVzc2FnZVxuICAgIH1cbiAgICBzdXBlcihtc2cpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucylcbiAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {
    return p && typeof p.then === 'function';
  },

  isFunction: function isFunction(fn) {
    return typeof fn === 'function';
  },

  isEnumerable: function isEnumerable(list) {
    return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';
  },

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (results, item) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaO0FBQ2YsV0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCO0FBQ0QsR0FINEI7O0FBSzdCQyxZQUw2QixzQkFLbEJDLEVBTGtCLEVBS2Q7QUFDYixXQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFyQjtBQUNELEdBUDRCOztBQVM3QkMsY0FUNkIsd0JBU2hCQyxJQVRnQixFQVNWO0FBQ2pCLFdBQU9BLFFBQVFDLE1BQU1DLE9BQU4sQ0FBY0YsSUFBZCxDQUFSLElBQStCLE9BQU9BLEtBQUtHLE9BQU9DLFFBQVosQ0FBUCxLQUFpQyxVQUF2RTtBQUNELEdBWDRCOztBQWE3QkMsU0FiNkIsbUJBYXJCQyxHQWJxQixFQWFoQjtBQUNYLFFBQUksQ0FBQ0wsTUFBTUMsT0FBTixDQUFjSSxHQUFkLENBQUwsRUFBeUIsTUFBTSxJQUFJQyxLQUFKLENBQVUsaURBQVYsQ0FBTjtBQUN6QixXQUFPRCxJQUFJRSxNQUFKLENBQVcsVUFBQ0MsT0FBRCxFQUFVQyxJQUFWLFVBQW1CRCxRQUFRRSxNQUFSLENBQWVWLE1BQU1DLE9BQU4sQ0FBY1EsSUFBZCxJQUFzQm5CLE1BQU1jLE9BQU4sQ0FBY0ssSUFBZCxDQUF0QixHQUE0QyxDQUFDQSxJQUFELENBQTNELENBQW5CLEVBQVgsRUFBa0csRUFBbEcsQ0FBUDtBQUNELEdBaEI0QixFQUEvQiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUHJvbWlzZUxpa2UocCkge1xuICAgIHJldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbidcbiAgfSxcblxuICBpc0Z1bmN0aW9uKGZuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJ1xuICB9LFxuXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7XG4gICAgcmV0dXJuIGxpc3QgJiYgQXJyYXkuaXNBcnJheShsaXN0KSB8fCB0eXBlb2YgbGlzdFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nXG4gIH0sXG5cbiAgZmxhdHRlbihhcnIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgYGZsYXR0ZW5gIHJlcXVpcmVzIHZhbGlkIGFycmF5IHBhcmFtZXRlcicpXG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKHJlc3VsdHMsIGl0ZW0pID0+IHJlc3VsdHMuY29uY2F0KEFycmF5LmlzQXJyYXkoaXRlbSkgPyB1dGlscy5mbGF0dGVuKGl0ZW0pIDogW2l0ZW1dKSwgW10pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    return new FP(function (resolve, reject) {
      var iterator = _this.steps[Symbol.iterator]();

      var next = function next(promise) {
        var current = iterator.next();
        if (current.done) return resolve(promise);var _current$value = _slicedToArray(
        current.value, 3),fnName = _current$value[0],args = _current$value[2];
        return next(promise[fnName].apply(promise, _toConsumableArray(args)));
      };
      next(FP.resolve(input));
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwicmVqZWN0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJuZXh0IiwiY3VycmVudCIsImRvbmUiLCJ2YWx1ZSIsImZuTmFtZSIsImFyZ3MiLCJpbnB1dCJdLCJtYXBwaW5ncyI6ImkwQkFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFlBQUQsRUFBUUM7OztBQUd6Qjs7O3VEQUhpQixFQUFqQjtBQU9BLFNBQVNELEtBQVQsR0FBaUI7QUFDZixNQUFNRSxLQUFLTixRQUFRLFNBQVIsQ0FBWDtBQUNBO0FBQ0EsTUFBTU8sVUFBVUQsR0FBR0UsT0FBSCxFQUFoQjtBQUNBRCxVQUFRRSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsU0FBT0YsT0FBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixRQUFULEdBQW9CO0FBQ2xCLE1BQU1DLEtBQUtOLFFBQVEsU0FBUixDQUFYOztBQUVBLFNBQU8saUJBQVM7QUFDZCxXQUFPLElBQUlNLEVBQUosQ0FBTyxVQUFDRSxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDakMsVUFBTUMsV0FBVyxNQUFLRixLQUFMLENBQVdHLE9BQU9ELFFBQWxCLEdBQWpCOztBQUVBLFVBQU1FLE9BQU8sU0FBUEEsSUFBTyxVQUFXO0FBQ3RCLFlBQU1DLFVBQVVILFNBQVNFLElBQVQsRUFBaEI7QUFDQSxZQUFJQyxRQUFRQyxJQUFaLEVBQWtCLE9BQU9QLFFBQVFELE9BQVIsQ0FBUCxDQUZJO0FBR0dPLGdCQUFRRSxLQUhYLEtBR2ZDLE1BSGUscUJBR0xDLElBSEs7QUFJdEIsZUFBT0wsS0FBS04sUUFBUVUsTUFBUixvQ0FBbUJDLElBQW5CLEVBQUwsQ0FBUDtBQUNELE9BTEQ7QUFNQUwsV0FBS1AsR0FBR0UsT0FBSCxDQUFXVyxLQUFYLENBQUw7QUFDRCxLQVZNLENBQVA7QUFXRCxHQVpEO0FBYUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7Y2hhaW4sIGNoYWluRW5kfVxuXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNoYWluKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICAvLyBjcmVhdGUgYSBwbGFjZWhvbGRlci9pbml0aWFsIHByb21pc2UgdG8gaG9sZCB0aGUgc3RlcHMvY2hhaW4gZGF0YVxuICBjb25zdCBwcm9taXNlID0gRlAucmVzb2x2ZSgpXG4gIHByb21pc2Uuc3RlcHMgPSBbXVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG4vKipcbiAqIENhbGwgYWZ0ZXIgc3RhcnRpbmcgYSBgLmNoYWluKClgLlxuICpcbiAqIE9uZSBvZiB0aGUgZmV3IG5vbi1jaGFpbmFibGUgbWV0aG9kcyBpbiB0aGUgQVBJLlxuICogQHJldHVybnMgYSBGdW5jdGlvbi4gSXQgcnVucyB5b3VyIGZ1bmN0aW9uYWwgY2hhaW4hXG4gKi9cbmZ1bmN0aW9uIGNoYWluRW5kKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgcmV0dXJuIG5ldyBGUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuc3RlcHNbU3ltYm9sLml0ZXJhdG9yXSgpXG5cbiAgICAgIGNvbnN0IG5leHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGl0ZXJhdG9yLm5leHQoKVxuICAgICAgICBpZiAoY3VycmVudC5kb25lKSByZXR1cm4gcmVzb2x2ZShwcm9taXNlKVxuICAgICAgICBjb25zdCBbZm5OYW1lLCAsIGFyZ3NdID0gY3VycmVudC52YWx1ZVxuICAgICAgICByZXR1cm4gbmV4dChwcm9taXNlW2ZuTmFtZV0oLi4uYXJncykpXG4gICAgICB9XG4gICAgICBuZXh0KEZQLnJlc29sdmUoaW5wdXQpKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/utils */ 2),isEnumerable = _require.isEnumerable;var _require2 =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require2.FPInputError,FunctionalError = _require2.FunctionalError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {
  return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});
}
function findIndex(callback) {
  return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});
}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results && results[0] ?
    { item: results[0], index: results.indexOf(results[0]) } :
    { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (aggregate, item) {
    return Promise.resolve(callback(item)).then(function (value) {return value ? aggregate.concat([item]) : aggregate;});
  }, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else {
    iterable = FP.resolve(iterable, this);
  }
  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).
        catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }

  var resolvedOrRejected = false;
  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [],altResults = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return count >= args.length || resolvedOrRejected || errors.length > _this._FP.errors.limit;};
  var setResult = function setResult(index) {return function (value) {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };};

  return new FP(function (resolve, reject) {
    var resolveIt = function resolveIt(x) {
      if (resolvedOrRejected) return;
      resolvedOrRejected = true;
      resolve(x);
    };
    var rejectIt = function rejectIt(x) {
      if (resolvedOrRejected) return;
      resolvedOrRejected = true;
      reject(x);
    };
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        if (errors.length > _this._FP.errors.limit) {
          Promise.all(altResults).
          then(function (data) {return rejectIt(results);});
          return true;
        }
        if (isDone()) {
          Promise.all(altResults).
          then(function (data) {return resolveIt(results);});
          return true;
        }
        return false;
      };
      var checkAndRun = function checkAndRun(val) {
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      var runItem = function runItem(c) {
        if (resolvedOrRejected) return;
        count++;
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        // const isComplete = complete()
        if (results[c]) {
          // console.error('completed/processing item already', c, results[c])
          return results[c];
        }
        // if (!isDone()) {
        //   return results
        // }
        // .then(results => {
        //   console.log('altResults', altResults)
        //   resolve(results)
        // })
        // const result = [args[c], c]
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        altResults[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {return setResult(c)(val);}).
        then(checkAndRun).
        catch(function (err) {
          _this._FP.errors.count++;
          errors.push(err);
          if (errors.length > _this._FP.errors.limit) {
            var fpErr = errors.length === 1 ? err : new FunctionalError('Error Limit ' + _this._FP.errors.limit + ' Exceeded. CurrentArrayIndex=' + c + ' ActualNumberOfErrors=' + _this._FP.errors.count, { errors: errors, results: results, ctx: _this });
            // console.warn('Error Limit:', c, JSON.stringify(this._FP.errors))
            Promise.resolve(setResult(c)(err)).
            then(function () {
              // console.log('\nAHHHHH SHOULD END RUNNING NOW-ish!!!!!!!!!\n')
              rejectIt(fpErr);
            });
          } else {
            // console.warn('Error OK:', JSON.stringify(this._FP.errors))
            // console.dir(err)
            return Promise.
            resolve().
            then(function () {return setResult(c)(err);}).
            then(checkAndRun);
          }
          // return err
        });

        return altResults[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { listen: listen };

function listen(obj) {for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) {
    throw new FPInputError('Input object isn\'t a valid EventEmitter or similar.');
  }

  // Sets up the handlers
  var handler = this.chainEnd();
  // console.log(`   > Attaching ${eventNames} handler`, eventNames)
  this.cleanupHandles = eventNames.map(function (eventName) {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
  });

  return this;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsImNsZWFudXBIYW5kbGVzIiwibWFwIiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxjQUFELEVBQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQW9DLG1DQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ2xDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RDtBQUMxRCxVQUFNLElBQUlOLFlBQUosQ0FBaUIsc0RBQWpCLENBQU47QUFDRDs7QUFFRDtBQUNBLE1BQU1PLFVBQVUsS0FBS0MsUUFBTCxFQUFoQjtBQUNBO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQkosV0FBV0ssR0FBWCxDQUFlLHFCQUFhO0FBQ2hETixRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RLLFNBQXRELEVBQWlFSixPQUFqRTtBQUNBLFdBQU8sb0JBQU1ILElBQUlBLElBQUlRLG1CQUFKLEdBQTBCLHFCQUExQixHQUFrRCxLQUF0RCxFQUE2REQsU0FBN0QsRUFBd0VKLE9BQXhFLENBQU4sRUFBUDtBQUNELEdBSHFCLENBQXRCOztBQUtBLFNBQU8sSUFBUDtBQUNEIiwiZmlsZSI6ImV2ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtGUElucHV0RXJyb3J9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0ge2xpc3Rlbn1cblxuZnVuY3Rpb24gbGlzdGVuKG9iaiwgLi4uZXZlbnROYW1lcykge1xuICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHtcbiAgICB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdJbnB1dCBvYmplY3QgaXNuXFwndCBhIHZhbGlkIEV2ZW50RW1pdHRlciBvciBzaW1pbGFyLicpXG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIC8vIGNvbnNvbGUubG9nKGAgICA+IEF0dGFjaGluZyAke2V2ZW50TmFtZXN9IGhhbmRsZXJgLCBldmVudE5hbWVzKVxuICB0aGlzLmNsZWFudXBIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lID0+IHtcbiAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgcmV0dXJuICgpID0+IG9ialtvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdvZmYnXShldmVudE5hbWUsIGhhbmRsZXIpXG4gIH0pXG5cbiAgcmV0dXJuIHRoaXNcbn1cbiJdfQ==

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 2),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, cast: cast, reject: reject, delay: delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ?
  Promise.all(promises) :
  promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).
  then(function (results) {
    return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});
  });
}

function cast(obj) {
  return Promise.resolve(obj);
}

function reject(err) {
  // ret._captureStackTrace();
  // ret._rejectCallback(reason, true);
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function delay(value, delay) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (arguments.length === 1) {
    delay = value;
    value = this || null;
  }
  if (!Number.isInteger(delay)) throw new FPInputError('fp.delay([promise,] millisec) requires a numeric arg.');
  return new FP(function (resolve) {
    setTimeout(function () {return resolve(value);}, delay);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwidmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiZUFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFFBQUQsRUFBTUMsVUFBTixFQUFZQyxjQUFaLEVBQW9CQyxZQUFwQixFQUFqQjs7QUFFQSxTQUFTSCxHQUFULENBQWFJLFFBQWIsRUFBdUI7QUFDckIsTUFBTUMsS0FBS1QsUUFBUSxJQUFSLENBQVg7QUFDQSxTQUFPUyxHQUFHQyxPQUFILENBQVdDLE1BQU1DLE9BQU4sQ0FBY0osUUFBZDtBQUNmSyxVQUFRVCxHQUFSLENBQVlJLFFBQVosQ0FEZTtBQUVmTSxtQkFBaUJOLFFBQWpCLENBRkksQ0FBUDtBQUdEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixNQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLE1BQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBUyx1QkFBT0wsSUFBSU0sR0FBSixDQUFQLEVBQVQsQ0FBZjtBQUNBLFNBQU9SLFFBQVFULEdBQVIsQ0FBWWUsTUFBWjtBQUNORyxNQURNLENBQ0QsbUJBQVc7QUFDZixXQUFPQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDekMsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBZ0JOLEdBQWhCLElBQXNCSSxHQUF0QixtQkFBNEJWLEdBQTVCLENBQVA7QUFDRCxLQUhNLEVBR0osRUFISSxDQUFQO0FBSUQsR0FOTSxDQUFQO0FBT0Q7O0FBRUQsU0FBU1YsSUFBVCxDQUFjVSxHQUFkLEVBQW1CO0FBQ2pCLFNBQU9GLFFBQVFILE9BQVIsQ0FBZ0JLLEdBQWhCLENBQVA7QUFDRDs7QUFFRCxTQUFTVCxNQUFULENBQWdCc0IsR0FBaEIsRUFBcUI7QUFDbkI7QUFDQTtBQUNBLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9mLFFBQVFQLE1BQVIsQ0FBZXNCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLGdEQUFOO0FBQ0Q7O0FBRUQsU0FBU3RCLEtBQVQsQ0FBZXdCLEtBQWYsRUFBc0J4QixLQUF0QixFQUE2QjtBQUMzQixNQUFNRSxLQUFLVCxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUlnQyxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCMUIsWUFBUXdCLEtBQVI7QUFDQUEsWUFBUSxRQUFRLElBQWhCO0FBQ0Q7QUFDRCxNQUFJLENBQUNHLE9BQU9DLFNBQVAsQ0FBaUI1QixLQUFqQixDQUFMLEVBQThCLE1BQU0sSUFBSU4sWUFBSixDQUFpQix1REFBakIsQ0FBTjtBQUM5QixTQUFPLElBQUlRLEVBQUosQ0FBTyxtQkFBVztBQUN2QjJCLGVBQVcsb0JBQU0xQixRQUFRcUIsS0FBUixDQUFOLEVBQVgsRUFBaUN4QixLQUFqQztBQUNELEdBRk0sQ0FBUDtBQUdEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RlBJbnB1dEVycm9yfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHthbGwsIGNhc3QsIHJlamVjdCwgZGVsYXl9XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcylcbiAgID8gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKVxuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpXG4gIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2luZGV4XVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1trZXldOiB2YWx9LCBvYmopXG4gICAgfSwge30pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGNhc3Qob2JqKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUob2JqKVxufVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIC8vIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgLy8gcmV0Ll9yZWplY3RDYWxsYmFjayhyZWFzb24sIHRydWUpO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5mdW5jdGlvbiBkZWxheSh2YWx1ZSwgZGVsYXkpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsYXkgPSB2YWx1ZVxuICAgIHZhbHVlID0gdGhpcyB8fCBudWxsXG4gIH1cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGRlbGF5KSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignZnAuZGVsYXkoW3Byb21pc2UsXSBtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKVxuICByZXR1cm4gbmV3IEZQKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh2YWx1ZSksIGRlbGF5KVxuICB9KVxufVxuIl19

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,